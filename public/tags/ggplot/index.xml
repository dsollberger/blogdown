<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggplot on The Median Data Scientist</title>
    <link>https://dsollberger2022.netlify.app/tags/ggplot/</link>
    <description>Recent content in ggplot on The Median Data Scientist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://dsollberger2022.netlify.app/tags/ggplot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Trying out the Flow package</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/06/2022-07-06-trying-out-the-flow-package/</link>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/06/2022-07-06-trying-out-the-flow-package/</guid>
      <description>I have been meaning to try out the flow package as it appears to help people visualize loops and conditional statements.
Here is some code that I made to help someone over in the R4DS Slack channel. The task was to check if the change in temperature was over 0.5, and then to set the next 30 days of data to NA.
temp_data &amp;lt;- rnorm(100, 20, 1) #fake data about temperaturesN &amp;lt;- length(temp_data)#initializationbuffer &amp;lt;- 0day &amp;lt;- 2previous_temp &amp;lt;- temp_data[1]# loopwhile(day &amp;lt;= N){current_temp &amp;lt;- temp_data[day]if(buffer == 0){if(!</description>
    </item>
    
    <item>
      <title>Drought Conditions</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/14/2022-06-14-drought-conditions/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/14/2022-06-14-drought-conditions/</guid>
      <description>“The data this week comes from the National Integrated Drought Information System.”
# load raw data# drought &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-14/drought.csv&amp;#39;)# drought_fips &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-14/drought-fips.csv&amp;#39;)# focus on subset of data# https://www.weather.gov/hnx/cafips# merced_df &amp;lt;- drought_fips |&amp;gt;# filter(FIPS == &amp;quot;06047&amp;quot;)# since original data was a fairly large data file, let&amp;#39;s# save a copy here to ease work# write_csv(merced_df, &amp;quot;merced_drought.csv&amp;quot;)df_raw &amp;lt;- read_csv(&amp;quot;merced_drought.csv&amp;quot;)## Rows: 1171 Columns: 4## ── Column specification ────────────────────────────────────────────────────────## Delimiter: &amp;quot;,&amp;quot;## chr (2): State, FIPS## dbl (1): DSCI## date (1): date## ## ℹ Use `spec()` to retrieve the full column specification for this data.</description>
    </item>
    
    <item>
      <title>TidyTuesday 20220607</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/07/2022-06-07-tidytuesday-20220607/</link>
      <pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/07/2022-06-07-tidytuesday-20220607/</guid>
      <description>“The data this week comes from Data For Progress.
“Each year, hundreds of corporations around the country participate in Pride, an annual celebration of the LGBTQ+ community’s history and progress. They present themselves as LGBTQ+ allies, but new research from Data for Progress finds that in between their yearly parade appearances, dozens of these corporations are giving to state politicians behind some of the most bigoted and harmful policies in over a decade.</description>
    </item>
    
    <item>
      <title>Counting Political Mail</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/04/2022-06-04-counting-political-mail/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/04/2022-06-04-counting-political-mail/</guid>
      <description>sender &amp;lt;- c(&amp;quot;Steve Glaser&amp;quot;, &amp;quot;Anna Caballero&amp;quot;, &amp;quot;Esmeralda Soria&amp;quot;, &amp;quot;Mike Karbassi&amp;quot;, &amp;quot;Adam Gray&amp;quot;, &amp;quot;CA Real Estate&amp;quot;, &amp;quot;CFT&amp;quot;, &amp;quot;misc&amp;quot;)counts &amp;lt;- c(3, 3, 10, 6, 4, 4, 3, 1)df &amp;lt;- data.frame(sender, counts)df &amp;lt;- df |&amp;gt;mutate(for_label = paste0(sender, &amp;quot;: &amp;quot;, counts)) |&amp;gt;mutate(sender_ranked = forcats::fct_reorder(sender, counts))df |&amp;gt;ggplot() +geom_bar(aes(x = counts, y = sender_ranked, fill = sender_ranked),stat = &amp;quot;identity&amp;quot;) +geom_text(aes(x = counts, y = sender_ranked, label = for_label),hjust = &amp;quot;right&amp;quot;, nudge_x = -0.</description>
    </item>
    
  </channel>
</rss>
