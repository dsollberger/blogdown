# axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title = element_text(size = 15, face = "bold",
color = "black", hjust = 0.0),
plot.subtitle = element_text(size = 20,
color = "#D31145", hjust = 0.5),
plot.caption = element_text(size = 20,
color = "#0C2340", hjust = 0.5))
d28_plot
d28_plot <- d28_data |>
ggplot() +
geom_line(aes(x = yearID, y = W, group = name), color = "gray75", size = 2) +
# focus on the line graphs of the two teams
geom_line(aes(x = yearID, y = W),
color = "#D31145", #https://teamcolorcodes.com/minnesota-twins-color-codes/
data = d28_data |> filter(name == "Minnesota Twins"),
size = 2) +
geom_line(aes(x = yearID, y = W_avg),
color = "#D31145", #https://teamcolorcodes.com/minnesota-twins-color-codes/
data = d28_data |> filter(name == "Minnesota Twins"),
linetype = "dashed",
size = 2) +
# drawing dashed lines for the averages
geom_line(aes(x = yearID, y = W),
color = "#0C2340", #https://teamcolorcodes.com/detroit-tigers-color-codes/
data = d28_data |> filter(name == "Detroit Tigers"),
size = 2) +
geom_line(aes(x = yearID, y = W_avg),
color = "#0C2340", #https://teamcolorcodes.com/detroit-tigers-color-codes/
data = d28_data |> filter(name == "Detroit Tigers"),
linetype = "dashed",
size = 2) +
# drawing error bars to highlight those deviations
geom_errorbar(aes(x = yearID, ymin = W_avg, ymax = W),
color = "#D31145", #https://teamcolorcodes.com/minnesota-twins-color-codes/
data = d28_data |> filter(name == "Minnesota Twins" & yearID == 2019),
size = 4) +
geom_errorbar(aes(x = yearID, ymin = W, ymax = W_avg),
color = "#0C2340", #https://teamcolorcodes.com/detroit-tigers-color-codes/
data = d28_data |> filter(name == "Detroit Tigers" & yearID == 2019),
size = 4) +
# labeling the dashed lines (for averages, and to clarify team names and colors)
ggrepel::geom_label_repel(aes(x = yearID, y = W_avg, label = for_label),
color = "#002B5C",
data = d28_data_for_labels |> filter(name == "Minnesota Twins"),
fill = "#D31145") +
ggrepel::geom_label_repel(aes(x = yearID, y = W_avg, label = for_label),
color = "#FA4616",
data = d28_data_for_labels |> filter(name == "Detroit Tigers"),
fill = "#0C2340") +
scale_x_continuous(breaks = c(2011:2021),
labels = c("2011", "2012", "2013", "2014", "2015",
"2016", "2017", "2018", "2019", "", "2021")) +
labs(title = "30 Day Chart Challenge, Day 28: Deviations\nWhen comparing MLB teams' wins\nagainst their averages from the past 10 full seasons,",
subtitle = "The 2019 Minnesota Twins had the largest\npositive deviation with 26.6 wins above average",
caption = "The 2019 Detroit Tigers had the largest\nnegative deviation with 30.8 wins below average",
x = "",
y = "wins") +
theme(axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
# axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title = element_text(size = 15, face = "bold",
color = "black", hjust = 0.0),
plot.subtitle = element_text(size = 20,
color = "#D31145", hjust = 0.5),
plot.caption = element_text(size = 20,
color = "#0C2340", hjust = 0.5))
d28_plot
d28_plot <- d28_data |>
ggplot() +
geom_line(aes(x = yearID, y = W, group = name), color = "gray75", size = 2) +
# focus on the line graphs of the two teams
geom_line(aes(x = yearID, y = W),
color = "#D31145", #https://teamcolorcodes.com/minnesota-twins-color-codes/
data = d28_data |> filter(name == "Minnesota Twins"),
size = 2) +
geom_line(aes(x = yearID, y = W_avg),
color = "#D31145", #https://teamcolorcodes.com/minnesota-twins-color-codes/
data = d28_data |> filter(name == "Minnesota Twins"),
linetype = "dashed",
size = 2) +
# drawing dashed lines for the averages
geom_line(aes(x = yearID, y = W),
color = "#0C2340", #https://teamcolorcodes.com/detroit-tigers-color-codes/
data = d28_data |> filter(name == "Detroit Tigers"),
size = 2) +
geom_line(aes(x = yearID, y = W_avg),
color = "#0C2340", #https://teamcolorcodes.com/detroit-tigers-color-codes/
data = d28_data |> filter(name == "Detroit Tigers"),
linetype = "dashed",
size = 2) +
# drawing error bars to highlight those deviations
geom_errorbar(aes(x = yearID, ymin = W_avg, ymax = W),
color = "#D31145", #https://teamcolorcodes.com/minnesota-twins-color-codes/
data = d28_data |> filter(name == "Minnesota Twins" & yearID == 2019),
size = 4) +
geom_errorbar(aes(x = yearID, ymin = W, ymax = W_avg),
color = "#0C2340", #https://teamcolorcodes.com/detroit-tigers-color-codes/
data = d28_data |> filter(name == "Detroit Tigers" & yearID == 2019),
size = 4) +
# labeling the dashed lines (for averages, and to clarify team names and colors)
ggrepel::geom_label_repel(aes(x = yearID, y = W_avg, label = for_label),
color = "#002B5C",
data = d28_data_for_labels |> filter(name == "Minnesota Twins"),
fill = "#D31145") +
ggrepel::geom_label_repel(aes(x = yearID, y = W_avg, label = for_label),
color = "#FA4616",
data = d28_data_for_labels |> filter(name == "Detroit Tigers"),
fill = "#0C2340") +
scale_x_continuous(breaks = c(2011:2021),
labels = c("2011", "2012", "2013", "2014", "2015",
"2016", "2017", "2018", "2019", "", "2021")) +
labs(title = "30 Day Chart Challenge, Day 28: Deviations\nWhen comparing MLB teams' wins\nagainst their averages from the past 10 full seasons,",
subtitle = "The 2019 Minnesota Twins had the largest\npositive deviation with 26.6 wins above average",
caption = "The 2019 Detroit Tigers had the largest\nnegative deviation with 30.8 wins below average",
x = "",
y = "wins") +
theme(axis.text.x = element_text(color = "black"),
axis.text.y = element_text(color = "black"),
# axis.ticks = element_blank(),
legend.position = "none",
legend.title = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title = element_text(size = 15, face = "bold",
color = "black", hjust = 0.0),
plot.subtitle = element_text(size = 20,
color = "#D31145", hjust = 0.5),
plot.caption = element_text(size = 20,
color = "#0C2340", hjust = 0.5))
d28_plot
(0.89)*(0.45) / ((0.89)*(0.45) + (0.87)*(1 - 0.45))
Q <- runif(12)
W <- Q / sum(Q)
E <- round(W, 2)
sum(E)
E
(0)*(0.26) + (1)*(0.23) + (2)*(0.25) + (3)*(0.26)
((0)*(0.02) + (1)*(0.17) + (2)*(0.07)) / (0.02 + 0.17 + 0.07)
((0)^2(0.02) + (1)^2(0.17) + (2)^2(0.07))/(0.02 + 0.17 + 0.07)
((0)^2*(0.02) + (1)^2*(0.17) + (2)^2*(0.07))/(0.02 + 0.17 + 0.07)
1.7308-1.1923^2
sqrt(0.3092)
16^2 / ((0.10)*(0.032)^2*(97)^2)
install.packages("blogdown")
library("blogdown")
install.packages("blogdown")
library('blogdown')
library("janitor")
install.packages('janitor')
library("corrplot")
library("forcats")
library("janitor")
library("skimr")
library("tidyverse")
reputation <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-31/reputation.csv')
View(reputation)
?pivot_wider
# https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-05-31
reputation <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-31/reputation.csv')
reputation_wide <- reputation |>
pivot_wider(names_from = name,
values_from = score)
View(reputation_wide)
# https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-05-31
reputation <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-31/reputation.csv')
reputation_wide <- reputation |>
select(-rank) |>
pivot_wider(names_from = name,
values_from = score)
View(reputation_wide)
# https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-05-31
reputation <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-31/reputation.csv')
reputation_wide <- reputation |>
select(-rank) |>
pivot_wider(names_from = name,
values_from = score)
reputation_wide <- janitor::clean_names(reputation_wide)
View(reputation)
write_csv(reputation, "reputation.csv")
write_csv(reputation_wide, "reputation_wide.csv")
library("corrplot")
library("forcats")
library("janitor")
library("skimr")
library("tidyverse")
?read_csv
reputation <- readr::read_csv("reputation.csv",
name_repair = janitor::clean_names())
reputation <- readr::read_csv("reputation.csv",
name_repair = janitor::make_clean_names())
reputation <- readr::read_csv("reputation.csv",
name_repair = janitor::make_clean_names
reputation <- readr::read_csv("reputation.csv",
name_repair = janitor::make_clean_names)
reputation <- readr::read_csv("reputation.csv",
name_repair = janitor::make_clean_names)
reputation_wide <- readr::read_csv("reputation_wide.csv",
name_repair = janitor::make_clean_names)
reputation <- readr::read_csv("reputation.csv",
name_repair = janitor::make_clean_names)
reputation_wide <- readr::read_csv("reputation_wide.csv",
name_repair = janitor::make_clean_names)
head(reputation)
head(reputation_wide)
str(reputation)
str(reputation, give.attr = FALSE)
str(reputation_wide, give.attr = FALSE)
reputation |>
summarize(mean = mean(score, na.rm = TRUE),
median = median(score, na.rm = TRUE),
sd = sd(score, na.rm = TRUE))
reputation |>
group_by(name) |>
summarize(mean = mean(score, na.rm = TRUE),
median = median(score, na.rm = TRUE),
sd = sd(score, na.rm = TRUE))
reputation |>
group_by(industry) |>
summarize(mean = mean(score, na.rm = TRUE),
median = median(score, na.rm = TRUE),
sd = sd(score, na.rm = TRUE))
library("corrplot")
library("forcats")
library("janitor")
library("skimr")
library("tidyverse")
reputation <- readr::read_csv("reputation.csv",
name_repair = janitor::make_clean_names)
reputation_wide <- readr::read_csv("reputation_wide.csv",
name_repair = janitor::make_clean_names)
head(reputation)
head(reputation_wide)
str(reputation, give.attr = FALSE)
str(reputation_wide, give.attr = FALSE)
reputation |>
summarize(mean = mean(score, na.rm = TRUE),
median = median(score, na.rm = TRUE),
sd = sd(score, na.rm = TRUE))
reputation |>
group_by(name) |>
summarize(mean = mean(score, na.rm = TRUE),
median = median(score, na.rm = TRUE),
sd = sd(score, na.rm = TRUE))
reputation |>
group_by(industry) |>
summarize(mean = mean(score, na.rm = TRUE),
median = median(score, na.rm = TRUE),
sd = sd(score, na.rm = TRUE))
reputation |>
filter(industry %in% c("Healthcare", "Media")) |>
ggplot(aes(x = industry, y = score)) +
geom_boxplot()
reputation |>
filter(industry %in% c("Healthcare", "Media")) |>
ggplot(aes(x = industry, y = score,
fill = industry)) +
geom_boxplot() +
labs(title = "Reputation Survey",
subtitle = "March 11 to April 3, 2022",
caption = "Source: Axios and Harris, TidyTuesday",
x = "industry",
y = "reputation")
reputation |>
filter(industry %in% c("Healthcare", "Media")) |>
ggplot(aes(x = industry, y = score,
fill = industry)) +
geom_boxplot() +
labs(title = "Reputation Survey",
subtitle = "March 11 to April 3, 2022",
caption = "Source: Axios and Harris, TidyTuesday",
x = "industry",
y = "reputation") +
theme(legend.position = "none")
reputation |>
filter(industry %in% c("Healthcare", "Media")) |>
ggplot(aes(x = industry, y = score,
fill = industry)) +
geom_boxplot() +
labs(title = "Reputation Survey",
subtitle = "March 11 to April 3, 2022",
caption = "Source: Axios and Harris, TidyTuesday",
x = "industry",
y = "reputation") +
theme(legend.position = "none")
library("corrplot")
library("forcats")
library("janitor")
library("skimr")
library("tidyverse")
reputation <- readr::read_csv("reputation.csv",
name_repair = janitor::make_clean_names)
reputation_wide <- readr::read_csv("reputation_wide.csv",
name_repair = janitor::make_clean_names)
head(reputation)
head(reputation_wide)
str(reputation, give.attr = FALSE)
str(reputation_wide, give.attr = FALSE)
reputation |>
summarize(mean = mean(score, na.rm = TRUE),
median = median(score, na.rm = TRUE),
sd = sd(score, na.rm = TRUE))
reputation |>
group_by(name) |>
summarize(mean = mean(score, na.rm = TRUE),
median = median(score, na.rm = TRUE),
sd = sd(score, na.rm = TRUE))
reputation |>
group_by(industry) |>
summarize(mean = mean(score, na.rm = TRUE),
median = median(score, na.rm = TRUE),
sd = sd(score, na.rm = TRUE))
reputation |>
ggplot(aes(x = score)) +
geom_histogram()
reputation |>
ggplot(aes(x = score, color = "black", fill = "blue")) +
geom_histogram() +
labs(title = "Company Reputation Survey",
subtitle = "2022",
caption = "Source: Axios and Harris, TidyTuesday",
x = "reputation score")
reputation |>
ggplot(aes(x = score),
color = "black", fill = "blue") +
geom_histogram() +
labs(title = "Company Reputation Survey",
subtitle = "2022",
caption = "Source: Axios and Harris, TidyTuesday",
x = "reputation score")
reputation |>
ggplot(aes(x = score)) +
geom_histogram(color = "black", fill = "blue") +
labs(title = "Company Reputation Survey",
subtitle = "2022",
caption = "Source: Axios and Harris, TidyTuesday",
x = "reputation score")
reputation_wide |>
ggplot(aes(x = trust, y = score)) +
geom_point()
reputation_wide |>
ggplot(aes(x = trust, y = culture)) +
geom_point()
reputation_wide |>
ggplot(aes(x = trust, y = culture)) +
geom_point() +
labs(title = "Company Reputation Survey",
subtitle = "2022",
caption = "Source: Axios and Harris, TidyTuesday",
x = "trust score",
y = "culture score")
correlation_value <- reputation_wide |>
summarize(r = cor(trust, culture,
use = "pairwise.complete.obs")) |>
unlist()
reputation_wide |>
ggplot(aes(x = trust, y = culture)) +
geom_point() +
labs(title = "Company Reputation Survey",
subtitle = paste0("Correlation: r = ",
round(correlation_value, 4)),
caption = "Source: Axios and Harris, TidyTuesday",
x = "trust score",
y = "culture score")
correlation_value <- reputation_wide |>
summarize(r = cor(trust, culture,
use = "pairwise.complete.obs")) |>
unlist()
reputation_wide |>
ggplot(aes(x = trust, y = culture)) +
geom_point() +
labs(title = "Company Reputation Survey",
subtitle = paste0("correlation: r = ",
round(correlation_value, 4)),
caption = "Source: Axios and Harris, TidyTuesday",
x = "trust score",
y = "culture score")
correlation_value <- reputation_wide |>
summarize(r = cor(trust, culture,
use = "pairwise.complete.obs")) |>
unlist()
reputation_wide |>
ggplot(aes(x = trust, y = culture)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Company Reputation Survey",
subtitle = paste0("correlation: r = ",
round(correlation_value, 4)),
caption = "Source: Axios and Harris, TidyTuesday",
x = "trust score",
y = "culture score")
reputation |>
ggplot(aes(y = score)) +
geom_boxplot()
reputation |>
ggplot(aes(y = score)) +
geom_boxplot(color = "black", fill = "blue")
reputation |>
ggplot(aes(y = score)) +
geom_boxplot(color = "black", fill = "lightblue")
reputation |>
ggplot(aes(y = score)) +
geom_boxplot(color = "black", fill = "red")
reputation |>
ggplot(aes(y = score)) +
geom_boxplot(color = "black", fill = "red") +
labs(title = "Company Reputation Survey",
subtitle = paste0("correlation: r = ",
round(correlation_value, 4)),
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
reputation |>
ggplot(aes(y = score)) +
geom_boxplot(color = "black", fill = "red") +
labs(title = "Company Reputation Survey",
subtitle = "an example of a single boxplot",
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
reputation |>
ggplot(aes(y = score, group = name)) +
geom_boxplot(color = "black", fill = "red") +
labs(title = "Company Reputation Survey",
subtitle = "an example of a single boxplot",
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
reputation |>
ggplot(aes(x = name, y = score, group = name)) +
geom_boxplot(color = "black", fill = "red") +
labs(title = "Company Reputation Survey",
subtitle = "an example of a single boxplot",
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
reputation |>
ggplot(aes(x = name, y = score,
fill = name, group = name)) +
geom_boxplot(color = "black", fill = "red") +
labs(title = "Company Reputation Survey",
subtitle = "an example of a single boxplot",
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
reputation |>
ggplot(aes(x = name, y = score,
fill = name, group = name)) +
geom_boxplot(color = "black") +
labs(title = "Company Reputation Survey",
subtitle = "an example of a single boxplot",
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
reputation |>
ggplot(aes(x = industry, y = score,
fill = industry, group = industry)) +
geom_boxplot(color = "black") +
labs(title = "Company Reputation Survey",
subtitle = "an example of a single boxplot",
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
install.packages('tinytex')
tinytex::install_tinytex()
install.packages("rainbowr")
devtools::install_github("djnavarro/rainbowr")
install.packages("devtools")
devtools::install_github("djnavarro/rainbowr")
#Dr djnavarro's rainbowr package
rainbowr::make_hex("bisexual")
install.packages("rsvg")
#Dr djnavarro's rainbowr package
rainbowr::make_hex("bisexual")
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown::build_site()
setwd("~/GitHub/blogdown")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site(local = TRUE)
blogdown::build_site(local = TRUE)
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown:::new_post_addin()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
