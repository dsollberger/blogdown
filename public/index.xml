<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Median Data Scientist</title>
    <link>https://dsollberger2022.netlify.app/</link>
    <description>Recent content on The Median Data Scientist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://dsollberger2022.netlify.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deck of Cards</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/08/08/2022-08-08-deck-of-cards/</link>
      <pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/08/08/2022-08-08-deck-of-cards/</guid>
      <description>Years ago, I had to simulate a deck of playing cards in a Python course. Oddly enough, I don’t recall ever carrying out this task in R. Today, I saw a neat code snippet about the crossing() command in tidyr by Tan Ho in the R4DS Slack channel, so let us give it a try.
library(&amp;quot;tidyverse&amp;quot;)suit &amp;lt;- c(&amp;quot;D&amp;quot;, &amp;quot;H&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;S&amp;quot;)rank &amp;lt;- c(2:10, &amp;quot;J&amp;quot;, &amp;quot;Q&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;)deck &amp;lt;- tidyr::crossing(rank, suit) |&amp;gt; dplyr::mutate(card = paste0(rank, suit))This yields a data frame with 3 columns: rank, suit, card.</description>
    </item>
    
    <item>
      <title>Return to Mermaid Diagrams</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/17/2022-07-17-return-to-mermaid-diagrams/</link>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/17/2022-07-17-return-to-mermaid-diagrams/</guid>
      <description>I have been meaning to get back into making flow charts for a while. Over the years, I have tried different code packages, but I think that mermaid graphs make the most sense for my simple goals.
library(&amp;quot;DiagrammeR&amp;quot;)For today’s practice, let us try to make a 2-by-2 decision tree.
DiagrammeR::mermaid(&amp;quot;graph LRnode1(start)node2{A}node3{not A}node4[B given A]node5[not B given A]node6[B given not A]node7[not B given not A]node1 --&amp;gt; node2node1 --&amp;gt; node3node2 --&amp;gt; node4node2 --&amp;gt; node5node3 --&amp;gt; node6node3 --&amp;gt; node7&amp;quot;){&#34;</description>
    </item>
    
    <item>
      <title>Stardew Valley Expanded</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/17/2022-07-17-stardew-valley-expanded/</link>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/17/2022-07-17-stardew-valley-expanded/</guid>
      <description>Now that I finally have some free time, I want to play the Stardew Valley Expanded mod. But first, let us make a flow chart of the mods and their dependencies.
library(&amp;quot;DiagrammeR&amp;quot;)my_plot &amp;lt;- DiagrammeR::mermaid(&amp;quot;graph LRSMAPI[SMAPI]Content_Patcher[Content Patcher]Custom_NPC_Exclusions[Custom NPC Exclusions]Expanded_Preconditions_Utility[Expanded Preconditions Utility]Extra_Map_Layers[Extra Map Layers]Farm_Type_Manager[Farm Type Manager]JSON_Assets[JSON Assets]SAAT[SAAT]Shop_Tile_Framework[Shop Tile Framework]Spacecore[Spacecore]Stardew_Valley_Expanded{Stardew Valley Expanded}SMAPI --&amp;gt; Content_PatcherSMAPI --&amp;gt; Custom_NPC_ExclusionsSMAPI --&amp;gt; Expanded_Preconditions_UtilitySMAPI --&amp;gt; Extra_Map_LayersSMAPI --&amp;gt; Farm_Type_ManagerSMAPI --&amp;gt; JSON_AssetsSMAPI --&amp;gt; Shop_Tile_FrameworkSMAPI --&amp;gt; SpacecoreContent_Patcher --&amp;gt; Farm_Type_ManagerExpanded_Preconditions_Utility --&amp;gt; JSON_AssetsExpanded_Preconditions_Utility --&amp;gt; Shop_Tile_FrameworkSpacecore --&amp;gt; JSON_AssetsSMAPI --&amp;gt; Stardew_Valley_ExpandedContent_Patcher --&amp;gt; Stardew_Valley_ExpandedCustom_NPC_Exclusions --&amp;gt; Stardew_Valley_ExpandedExpanded_Preconditions_Utility --&amp;gt; Stardew_Valley_ExpandedExtra_Map_Layers --&amp;gt; Stardew_Valley_ExpandedFarm_Type_Manager --&amp;gt; Stardew_Valley_ExpandedJSON_Assets --&amp;gt; Stardew_Valley_ExpandedSAAT --&amp;gt; Stardew_Valley_ExpandedShop_Tile_Framework --&amp;gt; Stardew_Valley_ExpandedSpacecore --&amp;gt; Stardew_Valley_Expanded&amp;quot;)</description>
    </item>
    
    <item>
      <title>Extracting Tables from a PDF</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/16/2022-07-16-extracting-tables-from-a-pdf/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/16/2022-07-16-extracting-tables-from-a-pdf/</guid>
      <description>Today I finally find myself needing to extract information from files delivered in the PDF format. I have heard good things about the tabulizer package, so we will try that out today.
Whelp, it turned out that I needed to ensure a 64-bit installation of Java before I could install tabulizer. Also, I used remotes::install_github(...) command from [the package’s GitHub page[(https://github.com/ropensci/tabulizer)] to force the installation (as there appears to be issues with installing a package through CRAN where there are concerns of Java dependency).</description>
    </item>
    
    <item>
      <title>Ridge Plots</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/16/2022-07-16-ridge-plots/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/16/2022-07-16-ridge-plots/</guid>
      <description>library(&amp;quot;ggridges&amp;quot;)library(&amp;quot;patchwork&amp;quot;)library(&amp;quot;tidyverse&amp;quot;)# load datadf &amp;lt;- readr::read_csv(&amp;quot;BioSQuaRE_data.csv&amp;quot;)# wranglingdf$term &amp;lt;- factor(df$term,levels = c(&amp;quot;Summer 2020&amp;quot;,&amp;quot;Fall 2020&amp;quot;,&amp;quot;Spring 2021&amp;quot;, &amp;quot;Fall 2021&amp;quot;))df_pre &amp;lt;- df |&amp;gt; filter(iter == &amp;quot;pre-test&amp;quot;)df_post &amp;lt;- df |&amp;gt; filter(iter == &amp;quot;post-test&amp;quot;)plot_pre &amp;lt;- df_pre |&amp;gt;ggplot(aes(x = Item, y = term, height = UCMer, group = term)) +geom_ridgeline(color = &amp;quot;#DAA900&amp;quot;, fill = &amp;quot;#002856&amp;quot;) +labs(title = &amp;quot;BioSQuaRE Results&amp;quot;,subtitle = &amp;quot;pre-test&amp;quot;,caption = &amp;quot;&amp;quot;,x = &amp;quot;Test Question&amp;quot;,y = &amp;quot;&amp;quot;) +theme(axis.</description>
    </item>
    
    <item>
      <title>Pascal&#39;s Triangle</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/08/2022-07-08-pascal-s-triangle/</link>
      <pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/08/2022-07-08-pascal-s-triangle/</guid>
      <description>Once again, I find that I have been nerd sniped (inspired by Mathigon). Today, I want to plot (and make an animation) for Pascal’s Triangle mod n. What I am thinking is
store Pascal Triangle numbers along with row and column numbers in a data framethen assign x and y valuesrescale the x and y values to make an equilateral triangle# load package(s)library(&amp;quot;tidyverse&amp;quot;)# allocate data spaceN &amp;lt;- 50 #number of rows of wanted Pascal&amp;#39;s Triangle# EDIT: my computer or software did not seem to handle larger numbers wellrow_total &amp;lt;- N*(N+1) / 2 #sum of 1 + 2 + .</description>
    </item>
    
    <item>
      <title>Making Flash Cards</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/07/2022-07-07-making-flash-cards/</link>
      <pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/07/2022-07-07-making-flash-cards/</guid>
      <description>Today I wanted to try out the flashr package for making flash cards (i.e. see if this is something I want to pursue further).
Someone (I am assuming his name is Jeffrey Stevens) over in the R4DS Slack channel mentioned a blog post using the flashr package.
#devtools::install_github(&amp;quot;JeffreyRStevens/flashr&amp;quot;)library(flashr)From one of my 30 Day Map Challenge adventures, I had a data frame about availability of therapy in the United States.</description>
    </item>
    
    <item>
      <title>Radically Infinite</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/06/2022-07-06-radically-infinite/</link>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/06/2022-07-06-radically-infinite/</guid>
      <description>In today’s procrastination effort, I want to generate the LaTeX code to produce an infinite radical expansion for the number 3, and generate the code using R.
… inspired by math teacher Chris Smith
tweetFirst, let me see if I can simply generate the pattern of integers. I will use the letter capital “S” and later replace it with the square root symbol.
stem &amp;lt;- &amp;quot;S 1 + &amp;quot;print(paste(stem, &amp;quot;8&amp;quot;))## [1] &amp;quot;S 1 + 8&amp;quot;for(a in 2:5){b &amp;lt;- (a+1)^2-1print(paste(stem, a, &amp;quot;*&amp;quot;, b/a))print(paste(stem, a, &amp;quot;S&amp;quot;, (b/a)^2))print(paste(stem, a, &amp;quot;S&amp;quot;, 1, &amp;quot;+&amp;quot;, (b/a)^2- 1))stem &amp;lt;- paste(stem, a, &amp;quot;S&amp;quot;, 1, &amp;quot;+&amp;quot;)}## [1] &amp;quot;S 1 + 2 * 4&amp;quot;## [1] &amp;quot;S 1 + 2 S 16&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 15&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 * 5&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 25&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 24&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 4 * 6&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 4 S 36&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 4 S 1 + 35&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 4 S 1 + 5 * 7&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 4 S 1 + 5 S 49&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 4 S 1 + 5 S 1 + 48&amp;quot;Not only do I need to now insert the square root symbol, but I would also need to close the parentheses.</description>
    </item>
    
    <item>
      <title>Trying out the Flow package</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/06/2022-07-06-trying-out-the-flow-package/</link>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/06/2022-07-06-trying-out-the-flow-package/</guid>
      <description>I have been meaning to try out the flow package as it appears to help people visualize loops and conditional statements.
Here is some code that I made to help someone over in the R4DS Slack channel. The task was to check if the change in temperature was over 0.5, and then to set the next 30 days of data to NA.
temp_data &amp;lt;- rnorm(100, 20, 1) #fake data about temperaturesN &amp;lt;- length(temp_data)#initializationbuffer &amp;lt;- 0day &amp;lt;- 2previous_temp &amp;lt;- temp_data[1]# loopwhile(day &amp;lt;= N){current_temp &amp;lt;- temp_data[day]if(buffer == 0){if(!</description>
    </item>
    
    <item>
      <title>Abortion Trigger Bans</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/26/2022-06-26-abortion-trigger-bans/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/26/2022-06-26-abortion-trigger-bans/</guid>
      <description>A colleague asked me about making an overlay map, and we discussed staring with the following information:
US states where conference funding may be inhibited by AB 1887US states where trigger bans took (or are in process) effect when Roe v Wade was overturned# load shape filesstates_shp &amp;lt;- st_read(&amp;quot;cb_2018_us_state_5m/cb_2018_us_state_5m.shp&amp;quot;)## Reading layer `cb_2018_us_state_5m&amp;#39; from data source ## `C:\Users\freex\Documents\GitHub\blogdown\content\blog\2022-06-26-abortion-trigger-bans\cb_2018_us_state_5m\cb_2018_us_state_5m.shp&amp;#39; ## using driver `ESRI Shapefile&amp;#39;## Simple feature collection with 56 features and 9 fields## Geometry type: MULTIPOLYGON## Dimension: XY## Bounding box: xmin: -179.</description>
    </item>
    
    <item>
      <title>Gauges</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/15/2022-06-15-gauges/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/15/2022-06-15-gauges/</guid>
      <description>Gauges are useful when wanting to display a quantity along with its range (minimum and maximum). Here, we will try out the plotly package’s functionality to build a gauge plot.
library(&amp;quot;plotly&amp;quot;)library(&amp;quot;tidyverse&amp;quot;)# https://plotly.com/r/gauge-charts/# https://marketing.ucmerced.edu/resources/brand-guidelines/colorsmy_gauge &amp;lt;- plot_ly(domain = list(x = c(0, 1), y = c(0, 1)),value = 6.35,title = list(text = &amp;quot;Overall Teaching Evaluation Score&amp;quot;,color = &amp;quot;#002856&amp;quot;,font = list(size = 24)),type = &amp;quot;indicator&amp;quot;,mode = &amp;quot;gauge+number&amp;quot;,gauge = list(axis = list(range = list(NULL, 7.</description>
    </item>
    
    <item>
      <title>Drought Conditions</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/14/2022-06-14-drought-conditions/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/14/2022-06-14-drought-conditions/</guid>
      <description>“The data this week comes from the National Integrated Drought Information System.”
# load raw data# drought &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-14/drought.csv&amp;#39;)# drought_fips &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-14/drought-fips.csv&amp;#39;)# focus on subset of data# https://www.weather.gov/hnx/cafips# merced_df &amp;lt;- drought_fips |&amp;gt;# filter(FIPS == &amp;quot;06047&amp;quot;)# since original data was a fairly large data file, let&amp;#39;s# save a copy here to ease work# write_csv(merced_df, &amp;quot;merced_drought.csv&amp;quot;)df_raw &amp;lt;- read_csv(&amp;quot;merced_drought.csv&amp;quot;)## Rows: 1171 Columns: 4## ── Column specification ────────────────────────────────────────────────────────## Delimiter: &amp;quot;,&amp;quot;## chr (2): State, FIPS## dbl (1): DSCI## date (1): date## ## ℹ Use `spec()` to retrieve the full column specification for this data.</description>
    </item>
    
    <item>
      <title>Bookdown and GitHub Pages</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/12/2022-06-12-bookdown-and-github-pages/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/12/2022-06-12-bookdown-and-github-pages/</guid>
      <description>Today I finally got a bookdown book to appear properly in GitHub pages (well, perhaps I did this in the past, but I do not recall).
The main gap was that I needed to add the following line
output_dir: docsto the _bookdown.yml file. Of course, the GitHub repository and Pages needed to be set up as well to point to the docs subdirectory.
Here were the helpful websites</description>
    </item>
    
    <item>
      <title>TidyTuesday 20220607</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/07/2022-06-07-tidytuesday-20220607/</link>
      <pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/07/2022-06-07-tidytuesday-20220607/</guid>
      <description>“The data this week comes from Data For Progress.
“Each year, hundreds of corporations around the country participate in Pride, an annual celebration of the LGBTQ+ community’s history and progress. They present themselves as LGBTQ+ allies, but new research from Data for Progress finds that in between their yearly parade appearances, dozens of these corporations are giving to state politicians behind some of the most bigoted and harmful policies in over a decade.</description>
    </item>
    
    <item>
      <title>Counting Political Mail</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/04/2022-06-04-counting-political-mail/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/04/2022-06-04-counting-political-mail/</guid>
      <description>sender &amp;lt;- c(&amp;quot;Steve Glaser&amp;quot;, &amp;quot;Anna Caballero&amp;quot;, &amp;quot;Esmeralda Soria&amp;quot;, &amp;quot;Mike Karbassi&amp;quot;, &amp;quot;Adam Gray&amp;quot;, &amp;quot;CA Real Estate&amp;quot;, &amp;quot;CFT&amp;quot;, &amp;quot;misc&amp;quot;)counts &amp;lt;- c(3, 3, 10, 6, 4, 4, 3, 1)df &amp;lt;- data.frame(sender, counts)df &amp;lt;- df |&amp;gt;mutate(for_label = paste0(sender, &amp;quot;: &amp;quot;, counts)) |&amp;gt;mutate(sender_ranked = forcats::fct_reorder(sender, counts))df |&amp;gt;ggplot() +geom_bar(aes(x = counts, y = sender_ranked, fill = sender_ranked),stat = &amp;quot;identity&amp;quot;) +geom_text(aes(x = counts, y = sender_ranked, label = for_label),hjust = &amp;quot;right&amp;quot;, nudge_x = -0.</description>
    </item>
    
    <item>
      <title>Trying out blastula</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/05/22/2022-05-22-trying-out-blastula/</link>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/05/22/2022-05-22-trying-out-blastula/</guid>
      <description># vignette: https://github.com/rstudio/blastula# Get a nicely formatted date/time stringcurrent_date_time &amp;lt;- add_readable_time()image_string &amp;lt;- blastula::add_image(&amp;quot;20220402_160706.jpg&amp;quot;)newsletter &amp;lt;- blastula::compose_email(body = md(glue::glue(&amp;quot;Good Afternoon,This is a very early draft of a newsletter format that has been created with the R programming language using the `blastula` package.For now, here is a picture from my garden:{image_string}&amp;quot;)),footer = md(glue::glue(&amp;quot;Newsletter compiled on {current_date_time}&amp;quot;)))#print(newsletter)</description>
    </item>
    
    <item>
      <title>Another Restart</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/05/20/2022-05-20-another-restart/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/05/20/2022-05-20-another-restart/</guid>
      <description>Today I finally got around to trying to make another blogdown site. In the web searches, I found that I was not alone in having trouble using the academic theme, so I switched over to universal. I still wanted a complex theme where I could customize colors and widgets.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://dsollberger2022.netlify.app/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/contact/</guid>
      <description>I am here to help you Data analysis?</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://dsollberger2022.netlify.app/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/faq/</guid>
      <description>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.
1. WHAT TO DO IF I HAVE STILL NOT RECEIVED THE ORDER? Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante.</description>
    </item>
    
  </channel>
</rss>
