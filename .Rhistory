ggplot(aes(y = score)) +
geom_boxplot(color = "black", fill = "blue")
reputation |>
ggplot(aes(y = score)) +
geom_boxplot(color = "black", fill = "lightblue")
reputation |>
ggplot(aes(y = score)) +
geom_boxplot(color = "black", fill = "red")
reputation |>
ggplot(aes(y = score)) +
geom_boxplot(color = "black", fill = "red") +
labs(title = "Company Reputation Survey",
subtitle = paste0("correlation: r = ",
round(correlation_value, 4)),
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
reputation |>
ggplot(aes(y = score)) +
geom_boxplot(color = "black", fill = "red") +
labs(title = "Company Reputation Survey",
subtitle = "an example of a single boxplot",
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
reputation |>
ggplot(aes(y = score, group = name)) +
geom_boxplot(color = "black", fill = "red") +
labs(title = "Company Reputation Survey",
subtitle = "an example of a single boxplot",
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
reputation |>
ggplot(aes(x = name, y = score, group = name)) +
geom_boxplot(color = "black", fill = "red") +
labs(title = "Company Reputation Survey",
subtitle = "an example of a single boxplot",
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
reputation |>
ggplot(aes(x = name, y = score,
fill = name, group = name)) +
geom_boxplot(color = "black", fill = "red") +
labs(title = "Company Reputation Survey",
subtitle = "an example of a single boxplot",
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
reputation |>
ggplot(aes(x = name, y = score,
fill = name, group = name)) +
geom_boxplot(color = "black") +
labs(title = "Company Reputation Survey",
subtitle = "an example of a single boxplot",
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
reputation |>
ggplot(aes(x = industry, y = score,
fill = industry, group = industry)) +
geom_boxplot(color = "black") +
labs(title = "Company Reputation Survey",
subtitle = "an example of a single boxplot",
caption = "Source: Axios and Harris, TidyTuesday",
x = "",
y = "reputation score")
install.packages('tinytex')
tinytex::install_tinytex()
install.packages("rainbowr")
devtools::install_github("djnavarro/rainbowr")
install.packages("devtools")
devtools::install_github("djnavarro/rainbowr")
#Dr djnavarro's rainbowr package
rainbowr::make_hex("bisexual")
install.packages("rsvg")
#Dr djnavarro's rainbowr package
rainbowr::make_hex("bisexual")
install.packages("gtsummary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
library("gtsummary")
install.packages("bookdown")
library("plotly")
library("tidyverse")
# https://plotly.com/r/gauge-charts/
# https://marketing.ucmerced.edu/resources/brand-guidelines/colors
my_gauge <- plot_ly(
domain = list(x = c(0, 1), y = c(0, 1)),
value = 6.35,
title = list(text = "Overall Teaching Evaluation Score",
color = "#002856",
font = list(size = 24)),
type = "indicator",
mode = "gauge+number",
gauge = list(
axis = list(range = list(1.0, 7.0),
tickcolor = "#64A43A",
tickfont = list(color = "#002856",
family = "Arial",
size = 18),
tickwidth = 10),
bar = list(color = "#002856"),
bgcolor = "#FFBF3C",
bordercolor = "#F18A00",
borderwidth = 5
)
) %>%
layout(margin = list(l=20,r=30),
font = list(color = "#002856", family = "Arial"),
paper_bgcolor = "#E5E5E5")
my_gauge #print
install.packages("lahman")
install.packages("Lahman")
library("Lahman")
library("tidyverse")
df_clean <- teams |> filter(yearID >= 2010)
df_clean <- Teams |> filter(yearID >= 2010)
lm1 <- lm(W ~ R + H + X2B + X3B + HR + SO + RA, data = df_clean)
summary(lm1)
df_clean <- teams |> filter(yearID >= 2010 & yearID <= 2019)
df_clean <- Teams |> filter(yearID >= 2010 & yearID <= 2019)
lm1 <- lm(W ~ R + H + X2B + X3B + HR + SO + RA, data = df_clean)
summary(lm1)
head(mtcars)
cars_tbl <- tibble (car   = c("Audi", "BMW", "Ford"),
color = c("red", "black", "white"),
mpg   = c(40, 42, 45)
)
library("tidyverse")
cars_tbl <- tibble (car   = c("Audi", "BMW", "Ford"),
color = c("red", "black", "white"),
mpg   = c(40, 42, 45)
)
xtabs(~car+color, data = cars_tbl)
?xtabs
M <- xtabs(~car+color, data = cars_tbl)
M[M==1]
M[M==1] <- cars_tbl$mpg
M
cars_tbl
M <- xtabs(~car+color, data = cars_tbl)
m <- nrow(cars_tbl)
n <- ncol(cars_tbl)
N <- reshape(M, 1, m*n)
?reshape
library("pracma")
N <- matrix(M, nrow = 1, byrow = TRUE)
N
N[N == 1] <- cars_tbl$mpg
M3 <- matrix(N, nrow = m)
M3
cars_tbl
cars_tbl$mpg
M2 <- matrix(M, nrow = 1, byrow = FALSE)
M2
M2[M2 == 1] <- cars_tbl$mpg
M3 <- matrix(M3, nrow = m)
M3
M3 <- matrix(M2, nrow = m)
M3
M3 <- matrix(M2, nrow = m, byrow = FALSE)
M3
M
M %*% cars_tbl$mpg
mat <- xtabs(~car+color, data = cars_tbl)
input_vals <- mat %*% cars_tbl$mpg
mat[mat == 1] <- input_vals
mat
install.packages("faux")
library("faux")
?add_random
add_random(class = 3)
remotes::install_github('coolbutuseless/isocubes')
library("isocubes")
img <- png::readPNG("Math.png")
ht        <- round( 10 * (1 - img[,,3]) ) # Use blue channel intensity as height
ht[,1]    <- 0 # image editing to remove some artefacts
dim(col)  <- dim(ht)
# A matrix of colours extracted from the image
col       <- rgb(img[,,1], img[,,2], img[,,3])
dim(col)  <- dim(ht)
# convert to cubes
coords <- coords_heightmap(ht, col = col, ground = 'xy')
cubes  <- isocubesGrob(coords, max_y = 130, fill = coords$col, col = NA)
# Draw
grid.newpage()
library("grid")
library("isocubes")
# Draw
grid.newpage()
grid.draw(cubes)
grid.draw(cubes)
head(ht)
# Convert to a matrix of heights
ht        <- round( 10 * (1 - img[,,2]) ) # Use blue channel intensity as height
ht[,1]    <- 0 # image editing to remove some artefacts
# A matrix of colours extracted from the image
col       <- rgb(img[,,1], img[,,2], img[,,3])
dim(col)  <- dim(ht)
# Convert to cubes
coords <- coords_heightmap(ht, col = col, ground = 'xy')
cubes  <- isocubesGrob(coords, max_y = 130, fill = coords$col, col = NA)
# Draw
grid.newpage()
grid.draw(cubes)
View(coords)
coords$z <- abs(coords$z)
cubes  <- isocubesGrob(coords, max_y = 130, fill = coords$col, col = NA)
# Draw
grid.newpage()
grid.draw(cubes)
mydf <- structure(list(trackId = c("A00w", "A03w", "A04w"), utmE = c(725627.874771454,
679041.510051637, 700003.80154205), utmN = c(3476659.75387877,
3415486.63150668, 3425046.14207722)), row.names = c(NA, -3L), class = c("data.table",
"data.frame"), .internal.selfref = <pointer: 0x00000178a1a01ef0>)
mydf <- structure(list(trackId = c("A00w", "A03w", "A04w"), utmE = c(725627.874771454,679041.510051637, 700003.80154205), utmN = c(3476659.75387877, 3415486.63150668, 3425046.14207722)), row.names = c(NA, -3L), class = c("data.table", "data.frame"), .internal.selfref = <pointer: 0x00000178a1a01ef0>)
Q <- data.frame(trackId = c("A00w", "A03w", "A04w"), utmE = c(725627.874771454,679041.510051637, 700003.80154205), utmN = c(3476659.75387877, 3415486.63150668, 3425046.14207722))
View(Q)
library("gtools")
install.packages("gtools")
library("gtools")
per <- permutations(n = 4, r = 4, repeats.allowed = FALSE)
per <- permutations(n = 3, r = 3, repeats.allowed = FALSE)
dat <- Q
dat2 <- do.call(rbind, lapply(1:nrow(per), function(x){
dat_temp <- dat[, per[x, ]]
names(dat_temp) <- names(dat)
return(dat_temp)
}))
View(dat2)
?crossing
library("tidyverse")
?crossing
Q |> tidyr::expand(.)
Q |> tidyr::expand(trackID, utmE, utmN)
Q |> tidyr::expand(trackid, utmE, utmN)
Q |> tidyr::expand(trackId, utmE, utmN)
W <- Q |> tidyr::expand(trackId, utmE, utmN)
View(W)
df<-tibble(
core_temp = c(20.3, 20.4,19.2,20.1,20.2),
core_temp_change = c(NA, 0.01,-1.20,0.9,0.1)
)
df<-data.frame(
core_temp = c(20.3, 20.4,19.2,20.1,20.2),
core_temp_change = c(NA, 0.01,-1.20,0.9,0.1)
)
df |> mutate(core_temp_diff = diff(core_temp))
library("tidyverse")
df |> mutate(core_temp_diff = diff(core_temp))
?diff
df <- df |> mutate(core_temp_diff = c(NA,diff(core_temp)))
View(df)
df <- df |> mutate(core_temp_new = case_when())
df <- df |> mutate(core_temp_new = case_when(abs(core_temp_diff) > 0.5 ~ NA, TRUE ~ core_temp_new)
)
df <- df |> mutate(core_temp_new = case_when(abs(core_temp_diff) > 0.5 ~ NA, TRUE ~ core_temp)
)
df <- df |> mutate(core_temp_new = ifthen(abs(core_temp_diff) > 0.5, NA, core_temp)
)
df <- df |> mutate(core_temp_new = if(abs(core_temp_diff) > 0.5, NA, core_temp)
?ifthen
?case_when
library("tidyverse")
df <- data.frame(
core_temp = c(20.3, 20.4,19.2,20.1,20.2),
core_temp_change = c(NA, 0.01,-1.20,0.9,0.1)
)
df <- data.frame(
core_temp = c(20.3, 20.4,19.2,20.1,20.2),
)
df <- data.frame(
core_temp = c(20.3, 20.4,19.2,20.1,20.2)
)
df <- df |>
mutate(core_temp_change = c(NA, diff(core_temp))) |>
rowwise() |>
mutate(core_temp_new = case_when(
abs(core_temp_change) > 0.5 ~ NA,
TRUE ~ core_temp)) |>
ungroup()
df <- df |>
mutate(core_temp_change = c(NA, diff(core_temp))) |>
rowwise() |>
mutate(core_temp_new = case_when(
abs(core_temp_change) > 0.5 ~ NA,
TRUE ~ paste0(core_temp))) |>
ungroup()
df <- df |>
mutate(core_temp_change = c(NA, diff(core_temp))) |>
mutate(core_temp_new = case_when(
abs(core_temp_change) > 0.5 ~ NA,
TRUE ~ paste0(core_temp)))
df <- df |>
mutate(core_temp_change = c(NA, diff(core_temp))) |>
mutate(core_temp = case_when(
abs(core_temp_change) > 0.5 ~ NA,
TRUE ~ core_temp))
df <- df |>
mutate(core_temp_change = c(NA, diff(core_temp))) |>
mutate(core_temp_new = case_when(
abs(core_temp_change) <= 0.5 ~ core_temp,
TRUE ~ NA))
df <- data.frame(
core_temp = c(20.3, 20.4,19.2,20.1,20.2)
)
df <- df |>
mutate(core_temp_change = c(NA, diff(core_temp)))
View(df)
df <- df |>
mutate(core_temp_change = c(0, diff(core_temp))) |>
mutate(core_temp_new = case_when(
abs(core_temp_change) <= 0.5 ~ core_temp,
TRUE ~ NA))
df <- df |>
mutate(core_temp_change = c(NA, diff(core_temp))) |>
mutate(core_temp_new = case_when(
abs(core_temp_change) <= 0.5 ~ core_temp))
))
df <- df |>
mutate(core_temp_change = c(NA, diff(core_temp))) |>
mutate(core_temp_new = case_when(
abs(core_temp_change) <= 0.5 ~ core_temp))
View(df)
df <- data.frame(
core_temp = c(20.3, 20.4,19.2,20.1,20.2)
)
df <- df |>
mutate(core_temp_change = c(NA, diff(core_temp))) |>
mutate(core_temp = case_when(
abs(core_temp_change) <= 0.5 ~ core_temp))
View(df)
View(df)
core_temp <- rnorm(100, 20, 1)
core_temp <- rnorm(100, 20, 1)
N <- length(core_temp)
for(item in 2:(N-30)){
if(abs(core_temp[item] - core_temp[item-1]) > 0.5){
core_temp[item:(item+30)] <- rep(NA, 30)
}
}
core_temp <- rnorm(100, 20, 1)
N <- length(core_temp)
for(item in 2:(N-30)){
if(abs(core_temp[item] - core_temp[item-1]) > 0.5){
core_temp[item:(item+29)] <- rep(NA, 30)
}
}
core_temp[3:32]
core_temp <- rnorm(100, 20, 1) #fake data
N <- length(core_temp)
item <- 2 #initialization
while(item < (N-30)){
if(abs(core_temp[item] - core_temp[item-1]) > 0.5){
core_temp[item:(item+29)] <- rep(NA, 30)
item <- item + 30
}
}
core_temp <- rnorm(100, 20, 1) #fake data
N <- length(core_temp)
item <- 2 #initialization
while(item < (N-30)){
if(abs(core_temp[item] - core_temp[item-1]) > 0.5){
core_temp[item:(item+29)] <- rep(NA, 30)
item <- item + 31
}
}
core_temp <- rnorm(100, 20, 1) #fake data
N <- length(core_temp)
item <- 2 #initialization
while(item < (N-30)){
if(abs(core_temp[item] - core_temp[item-1]) > 0.5){
core_temp[item:(item+29)] <- rep(NA, 30)
item <- item + 31
} else {
item <- item + 1
}
}
core_temp
core_temp <- rnorm(100, 20, 1) #fake data
N <- length(core_temp)
#initialization
buffer <- 0
day <- 2
# loop
while(day <= N){
if(buffer == 0){
if(abs(core_temp[day] - core_temp[day-1]) > 0.5){
buffer <- 30
}
} else {
core_temp[day] <- NA
buffer <- buffer - 1
}
day <- day + 1
}
core_temp
core_temp <- rnorm(100, 20, 1) #fake data
N <- length(core_temp)
#initialization
buffer <- 0
day <- 2
# loop
while(day <= N){
if(buffer == 0){
if(abs(core_temp[day] - core_temp[day-1]) > 0.5){
buffer <- 31
}
} else {
core_temp[day] <- NA
buffer <- buffer - 1
}
day <- day + 1
}
core_temp <- rnorm(100, 20, 1) #fake data
N <- length(core_temp)
#initialization
buffer <- 0
day <- 2
# loop
while(day <= N){
if(buffer == 0){
if(abs(core_temp[day] - core_temp[day-1]) > 0.5){
buffer <- 30
}
} elseif(buffer == 1){
core_temp <- rnorm(100, 20, 1) #fake data
N <- length(core_temp)
#initialization
buffer <- 0
day <- 2
# loop
while(day <= N){
if(buffer == 0){
if(abs(core_temp[day] - core_temp[day-1]) > 0.5){
buffer <- 30
}
} else if(buffer == 1){
if(abs(core_temp[day] - core_temp[day-1]) > 0.5){
buffer <- 30
}
} else {
core_temp[day] <- NA
buffer <- buffer - 1
}
day <- day + 1
}
core_temp <- rnorm(100, 20, 1) #fake data
N <- length(core_temp)
#initialization
buffer <- 0
day <- 2
previous_temp <- core_temp[1]
# loop
while(day <= N){
current_temp <- core_temp[day]
if(buffer == 0){
if(abs(current_temp - previous_temp) > 0.5){
buffer <- 30
}
}} else {
core_temp <- rnorm(100, 20, 1) #fake data
N <- length(core_temp)
#initialization
buffer <- 0
day <- 2
previous_temp <- core_temp[1]
# loop
while(day <= N){
current_temp <- core_temp[day]
if(buffer == 0){
if(abs(current_temp - previous_temp) > 0.5){
buffer <- 30
}
} else {
core_temp[day] <- NA
buffer <- buffer - 1
}
previous_temp <- current_temp
day <- day + 1
}
core_temp
core_temp <- rnorm(100, 20, 1) #fake data
N <- length(core_temp)
#initialization
buffer <- 0
day <- 2
previous_temp <- core_temp[1]
# loop
while(day <= N){
current_temp <- core_temp[day]
if(buffer == 0){
#perform check
if(abs(current_temp - previous_temp) > 0.5){
buffer <- 30
}
} else {
core_temp[day] <- NA
buffer <- buffer - 1
}
# iterate
previous_temp <- current_temp
day <- day + 1
}
core_temp
blogdown::serve_site()
setwd("~/GitHub/blogdown")
blogdown::serve_site()
blogdown::stop_server()
