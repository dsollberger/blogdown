<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data visualization on The Median Data Scientist</title>
    <link>https://dsollberger2022.netlify.app/categories/data-visualization/</link>
    <description>Recent content in data visualization on The Median Data Scientist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://dsollberger2022.netlify.app/categories/data-visualization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stardew Valley Expanded</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/17/2022-07-17-stardew-valley-expanded/</link>
      <pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/17/2022-07-17-stardew-valley-expanded/</guid>
      <description>Now that I finally have some free time, I want to play the Stardew Valley Expanded mod. But first, let us make a flow chart of the mods and their dependencies.
library(&amp;quot;DiagrammeR&amp;quot;)my_plot &amp;lt;- DiagrammeR::mermaid(&amp;quot;graph LRSMAPI[SMAPI]Content_Patcher[Content Patcher]Custom_NPC_Exclusions[Custom NPC Exclusions]Expanded_Preconditions_Utility[Expanded Preconditions Utility]Extra_Map_Layers[Extra Map Layers]Farm_Type_Manager[Farm Type Manager]JSON_Assets[JSON Assets]SAAT[SAAT]Shop_Tile_Framework[Shop Tile Framework]Spacecore[Spacecore]Stardew_Valley_Expanded{Stardew Valley Expanded}SMAPI --&amp;gt; Content_PatcherSMAPI --&amp;gt; Custom_NPC_ExclusionsSMAPI --&amp;gt; Expanded_Preconditions_UtilitySMAPI --&amp;gt; Extra_Map_LayersSMAPI --&amp;gt; Farm_Type_ManagerSMAPI --&amp;gt; JSON_AssetsSMAPI --&amp;gt; Shop_Tile_FrameworkSMAPI --&amp;gt; SpacecoreContent_Patcher --&amp;gt; Farm_Type_ManagerExpanded_Preconditions_Utility --&amp;gt; JSON_AssetsExpanded_Preconditions_Utility --&amp;gt; Shop_Tile_FrameworkSpacecore --&amp;gt; JSON_AssetsSMAPI --&amp;gt; Stardew_Valley_ExpandedContent_Patcher --&amp;gt; Stardew_Valley_ExpandedCustom_NPC_Exclusions --&amp;gt; Stardew_Valley_ExpandedExpanded_Preconditions_Utility --&amp;gt; Stardew_Valley_ExpandedExtra_Map_Layers --&amp;gt; Stardew_Valley_ExpandedFarm_Type_Manager --&amp;gt; Stardew_Valley_ExpandedJSON_Assets --&amp;gt; Stardew_Valley_ExpandedSAAT --&amp;gt; Stardew_Valley_ExpandedShop_Tile_Framework --&amp;gt; Stardew_Valley_ExpandedSpacecore --&amp;gt; Stardew_Valley_Expanded&amp;quot;)</description>
    </item>
    
    <item>
      <title>Ridge Plots</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/16/2022-07-16-ridge-plots/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/16/2022-07-16-ridge-plots/</guid>
      <description>library(&amp;quot;ggridges&amp;quot;)library(&amp;quot;patchwork&amp;quot;)library(&amp;quot;tidyverse&amp;quot;)# load datadf &amp;lt;- readr::read_csv(&amp;quot;BioSQuaRE_data.csv&amp;quot;)# wranglingdf$term &amp;lt;- factor(df$term,levels = c(&amp;quot;Summer 2020&amp;quot;,&amp;quot;Fall 2020&amp;quot;,&amp;quot;Spring 2021&amp;quot;, &amp;quot;Fall 2021&amp;quot;))df_pre &amp;lt;- df |&amp;gt; filter(iter == &amp;quot;pre-test&amp;quot;)df_post &amp;lt;- df |&amp;gt; filter(iter == &amp;quot;post-test&amp;quot;)plot_pre &amp;lt;- df_pre |&amp;gt;ggplot(aes(x = Item, y = term, height = UCMer, group = term)) +geom_ridgeline(color = &amp;quot;#DAA900&amp;quot;, fill = &amp;quot;#002856&amp;quot;) +labs(title = &amp;quot;BioSQuaRE Results&amp;quot;,subtitle = &amp;quot;pre-test&amp;quot;,caption = &amp;quot;&amp;quot;,x = &amp;quot;Test Question&amp;quot;,y = &amp;quot;&amp;quot;) +theme(axis.</description>
    </item>
    
    <item>
      <title>Pascal&#39;s Triangle</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/08/2022-07-08-pascal-s-triangle/</link>
      <pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/08/2022-07-08-pascal-s-triangle/</guid>
      <description>Once again, I find that I have been nerd sniped (inspired by Mathigon). Today, I want to plot (and make an animation) for Pascal’s Triangle mod n. What I am thinking is
store Pascal Triangle numbers along with row and column numbers in a data framethen assign x and y valuesrescale the x and y values to make an equilateral triangle# load package(s)library(&amp;quot;tidyverse&amp;quot;)# allocate data spaceN &amp;lt;- 50 #number of rows of wanted Pascal&amp;#39;s Triangle# EDIT: my computer or software did not seem to handle larger numbers wellrow_total &amp;lt;- N*(N+1) / 2 #sum of 1 + 2 + .</description>
    </item>
    
    <item>
      <title>Gauges</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/15/2022-06-15-gauges/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/15/2022-06-15-gauges/</guid>
      <description>Gauges are useful when wanting to display a quantity along with its range (minimum and maximum). Here, we will try out the plotly package’s functionality to build a gauge plot.
library(&amp;quot;plotly&amp;quot;)library(&amp;quot;tidyverse&amp;quot;)# https://plotly.com/r/gauge-charts/# https://marketing.ucmerced.edu/resources/brand-guidelines/colorsmy_gauge &amp;lt;- plot_ly(domain = list(x = c(0, 1), y = c(0, 1)),value = 6.35,title = list(text = &amp;quot;Overall Teaching Evaluation Score&amp;quot;,color = &amp;quot;#002856&amp;quot;,font = list(size = 24)),type = &amp;quot;indicator&amp;quot;,mode = &amp;quot;gauge+number&amp;quot;,gauge = list(axis = list(range = list(NULL, 7.</description>
    </item>
    
    <item>
      <title>TidyTuesday 20220607</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/07/2022-06-07-tidytuesday-20220607/</link>
      <pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/07/2022-06-07-tidytuesday-20220607/</guid>
      <description>“The data this week comes from Data For Progress.
“Each year, hundreds of corporations around the country participate in Pride, an annual celebration of the LGBTQ+ community’s history and progress. They present themselves as LGBTQ+ allies, but new research from Data for Progress finds that in between their yearly parade appearances, dozens of these corporations are giving to state politicians behind some of the most bigoted and harmful policies in over a decade.</description>
    </item>
    
    <item>
      <title>Counting Political Mail</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/04/2022-06-04-counting-political-mail/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/04/2022-06-04-counting-political-mail/</guid>
      <description>sender &amp;lt;- c(&amp;quot;Steve Glaser&amp;quot;, &amp;quot;Anna Caballero&amp;quot;, &amp;quot;Esmeralda Soria&amp;quot;, &amp;quot;Mike Karbassi&amp;quot;, &amp;quot;Adam Gray&amp;quot;, &amp;quot;CA Real Estate&amp;quot;, &amp;quot;CFT&amp;quot;, &amp;quot;misc&amp;quot;)counts &amp;lt;- c(3, 3, 10, 6, 4, 4, 3, 1)df &amp;lt;- data.frame(sender, counts)df &amp;lt;- df |&amp;gt;mutate(for_label = paste0(sender, &amp;quot;: &amp;quot;, counts)) |&amp;gt;mutate(sender_ranked = forcats::fct_reorder(sender, counts))df |&amp;gt;ggplot() +geom_bar(aes(x = counts, y = sender_ranked, fill = sender_ranked),stat = &amp;quot;identity&amp;quot;) +geom_text(aes(x = counts, y = sender_ranked, label = for_label),hjust = &amp;quot;right&amp;quot;, nudge_x = -0.</description>
    </item>
    
  </channel>
</rss>
