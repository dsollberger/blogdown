<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Median Data Scientist</title>
    <link>https://dsollberger2022.netlify.app/</link>
    <description>Recent content on The Median Data Scientist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://dsollberger2022.netlify.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Radically Infinite</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/06/2022-07-06-radically-infinite/</link>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/06/2022-07-06-radically-infinite/</guid>
      <description>In today’s procrastination effort, I want to generate the LaTeX code to produce an infinite radical expansion for the number 3, and generate the code using R.
… inspired by math teacher Chris Smith
tweetFirst, let me see if I can simply generate the pattern of integers. I will use the letter capital “S” and later replace it with the square root symbol.
stem &amp;lt;- &amp;quot;S 1 + &amp;quot;print(paste(stem, &amp;quot;8&amp;quot;))## [1] &amp;quot;S 1 + 8&amp;quot;for(a in 2:5){b &amp;lt;- (a+1)^2-1print(paste(stem, a, &amp;quot;*&amp;quot;, b/a))print(paste(stem, a, &amp;quot;S&amp;quot;, (b/a)^2))print(paste(stem, a, &amp;quot;S&amp;quot;, 1, &amp;quot;+&amp;quot;, (b/a)^2- 1))stem &amp;lt;- paste(stem, a, &amp;quot;S&amp;quot;, 1, &amp;quot;+&amp;quot;)}## [1] &amp;quot;S 1 + 2 * 4&amp;quot;## [1] &amp;quot;S 1 + 2 S 16&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 15&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 * 5&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 25&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 24&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 4 * 6&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 4 S 36&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 4 S 1 + 35&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 4 S 1 + 5 * 7&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 4 S 1 + 5 S 49&amp;quot;## [1] &amp;quot;S 1 + 2 S 1 + 3 S 1 + 4 S 1 + 5 S 1 + 48&amp;quot;Not only do I need to now insert the square root symbol, but I would also need to close the parentheses.</description>
    </item>
    
    <item>
      <title>Trying out the Flow package</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/07/06/2022-07-06-trying-out-the-flow-package/</link>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/07/06/2022-07-06-trying-out-the-flow-package/</guid>
      <description>I have been meaning to try out the flow package as it appears to help people visualize loops and conditional statements.
Here is some code that I made to help someone over in the R4DS Slack channel. The task was to check if the change in temperature was over 0.5, and then to set the next 30 days of data to NA.
temp_data &amp;lt;- rnorm(100, 20, 1) #fake data about temperaturesN &amp;lt;- length(temp_data)#initializationbuffer &amp;lt;- 0day &amp;lt;- 2previous_temp &amp;lt;- temp_data[1]# loopwhile(day &amp;lt;= N){current_temp &amp;lt;- temp_data[day]if(buffer == 0){if(!</description>
    </item>
    
    <item>
      <title>Abortion Trigger Bans</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/26/2022-06-26-abortion-trigger-bans/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/26/2022-06-26-abortion-trigger-bans/</guid>
      <description>A colleague asked me about making an overlay map, and we discussed staring with the following information:
US states where conference funding may be inhibited by AB 1887US states where trigger bans took (or are in process) effect when Roe v Wade was overturned# load shape filesstates_shp &amp;lt;- st_read(&amp;quot;cb_2018_us_state_5m/cb_2018_us_state_5m.shp&amp;quot;)## Reading layer `cb_2018_us_state_5m&amp;#39; from data source ## `C:\Users\freex\Documents\GitHub\blogdown\content\blog\2022-06-26-abortion-trigger-bans\cb_2018_us_state_5m\cb_2018_us_state_5m.shp&amp;#39; ## using driver `ESRI Shapefile&amp;#39;## Simple feature collection with 56 features and 9 fields## Geometry type: MULTIPOLYGON## Dimension: XY## Bounding box: xmin: -179.</description>
    </item>
    
    <item>
      <title>Gauges</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/15/2022-06-15-gauges/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/15/2022-06-15-gauges/</guid>
      <description>Gauges are useful when wanting to display a quantity along with its range (minimum and maximum). Here, we will try out the plotly package’s functionality to build a gauge plot.
library(&amp;quot;plotly&amp;quot;)library(&amp;quot;tidyverse&amp;quot;)# https://plotly.com/r/gauge-charts/# https://marketing.ucmerced.edu/resources/brand-guidelines/colorsmy_gauge &amp;lt;- plot_ly(domain = list(x = c(0, 1), y = c(0, 1)),value = 6.35,title = list(text = &amp;quot;Overall Teaching Evaluation Score&amp;quot;,color = &amp;quot;#002856&amp;quot;,font = list(size = 24)),type = &amp;quot;indicator&amp;quot;,mode = &amp;quot;gauge+number&amp;quot;,gauge = list(axis = list(range = list(NULL, 7.</description>
    </item>
    
    <item>
      <title>Drought Conditions</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/14/2022-06-14-drought-conditions/</link>
      <pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/14/2022-06-14-drought-conditions/</guid>
      <description>“The data this week comes from the National Integrated Drought Information System.”
# load raw data# drought &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-14/drought.csv&amp;#39;)# drought_fips &amp;lt;- readr::read_csv(&amp;#39;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-06-14/drought-fips.csv&amp;#39;)# focus on subset of data# https://www.weather.gov/hnx/cafips# merced_df &amp;lt;- drought_fips |&amp;gt;# filter(FIPS == &amp;quot;06047&amp;quot;)# since original data was a fairly large data file, let&amp;#39;s# save a copy here to ease work# write_csv(merced_df, &amp;quot;merced_drought.csv&amp;quot;)df_raw &amp;lt;- read_csv(&amp;quot;merced_drought.csv&amp;quot;)## Rows: 1171 Columns: 4## ── Column specification ────────────────────────────────────────────────────────## Delimiter: &amp;quot;,&amp;quot;## chr (2): State, FIPS## dbl (1): DSCI## date (1): date## ## ℹ Use `spec()` to retrieve the full column specification for this data.</description>
    </item>
    
    <item>
      <title>Bookdown and GitHub Pages</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/12/2022-06-12-bookdown-and-github-pages/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/12/2022-06-12-bookdown-and-github-pages/</guid>
      <description>Today I finally got a bookdown book to appear properly in GitHub pages (well, perhaps I did this in the past, but I do not recall).
The main gap was that I needed to add the following line
output_dir: docsto the _bookdown.yml file. Of course, the GitHub repository and Pages needed to be set up as well to point to the docs subdirectory.
Here were the helpful websites</description>
    </item>
    
    <item>
      <title>TidyTuesday 20220607</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/07/2022-06-07-tidytuesday-20220607/</link>
      <pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/07/2022-06-07-tidytuesday-20220607/</guid>
      <description>“The data this week comes from Data For Progress.
“Each year, hundreds of corporations around the country participate in Pride, an annual celebration of the LGBTQ+ community’s history and progress. They present themselves as LGBTQ+ allies, but new research from Data for Progress finds that in between their yearly parade appearances, dozens of these corporations are giving to state politicians behind some of the most bigoted and harmful policies in over a decade.</description>
    </item>
    
    <item>
      <title>Counting Political Mail</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/06/04/2022-06-04-counting-political-mail/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/06/04/2022-06-04-counting-political-mail/</guid>
      <description>sender &amp;lt;- c(&amp;quot;Steve Glaser&amp;quot;, &amp;quot;Anna Caballero&amp;quot;, &amp;quot;Esmeralda Soria&amp;quot;, &amp;quot;Mike Karbassi&amp;quot;, &amp;quot;Adam Gray&amp;quot;, &amp;quot;CA Real Estate&amp;quot;, &amp;quot;CFT&amp;quot;, &amp;quot;misc&amp;quot;)counts &amp;lt;- c(3, 3, 10, 6, 4, 4, 3, 1)df &amp;lt;- data.frame(sender, counts)df &amp;lt;- df |&amp;gt;mutate(for_label = paste0(sender, &amp;quot;: &amp;quot;, counts)) |&amp;gt;mutate(sender_ranked = forcats::fct_reorder(sender, counts))df |&amp;gt;ggplot() +geom_bar(aes(x = counts, y = sender_ranked, fill = sender_ranked),stat = &amp;quot;identity&amp;quot;) +geom_text(aes(x = counts, y = sender_ranked, label = for_label),hjust = &amp;quot;right&amp;quot;, nudge_x = -0.</description>
    </item>
    
    <item>
      <title>Trying out blastula</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/05/22/2022-05-22-trying-out-blastula/</link>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/05/22/2022-05-22-trying-out-blastula/</guid>
      <description># vignette: https://github.com/rstudio/blastula# Get a nicely formatted date/time stringcurrent_date_time &amp;lt;- add_readable_time()image_string &amp;lt;- blastula::add_image(&amp;quot;20220402_160706.jpg&amp;quot;)newsletter &amp;lt;- blastula::compose_email(body = md(glue::glue(&amp;quot;Good Afternoon,This is a very early draft of a newsletter format that has been created with the R programming language using the `blastula` package.For now, here is a picture from my garden:{image_string}&amp;quot;)),footer = md(glue::glue(&amp;quot;Newsletter compiled on {current_date_time}&amp;quot;)))#print(newsletter)</description>
    </item>
    
    <item>
      <title>Another Restart</title>
      <link>https://dsollberger2022.netlify.app/blog/2022/05/20/2022-05-20-another-restart/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/blog/2022/05/20/2022-05-20-another-restart/</guid>
      <description>Today I finally got around to trying to make another blogdown site. In the web searches, I found that I was not alone in having trouble using the academic theme, so I switched over to universal. I still wanted a complex theme where I could customize colors and widgets.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://dsollberger2022.netlify.app/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/contact/</guid>
      <description>I am here to help you Data analysis?</description>
    </item>
    
    <item>
      <title>FAQ</title>
      <link>https://dsollberger2022.netlify.app/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dsollberger2022.netlify.app/faq/</guid>
      <description>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.
1. WHAT TO DO IF I HAVE STILL NOT RECEIVED THE ORDER? Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante.</description>
    </item>
    
  </channel>
</rss>
